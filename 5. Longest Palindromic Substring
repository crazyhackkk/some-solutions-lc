class Solution {
public:
    string longestPalindrome(string s) {
        int n = s.length();
    bool dp[n][n];
    memset(dp, false, sizeof(dp));

    int maxLength = 1;
    int start = 0;

    // All substrings of length 1 are palindromes
    for (int i = 0; i < n; i++)
        dp[i][i] = true;

    // Check for sub-strings of length 2
    for (int i = 0; i < n - 1; i++) {
        if (s[i] == s[i + 1]) {
            dp[i][i + 1] = true;
            start = i;
            maxLength = 2;
        }
    }

    // Check for sub-strings of length greater than 2
    for (int k = 3; k <= n; k++) {
        for (int i = 0; i < n - k + 1; i++) {
            int j = i + k - 1;
            if (dp[i + 1][j - 1] && s[i] == s[j]) {
                dp[i][j] = true;
                if (k > maxLength) {
                    maxLength = k;
                    start = i;
                }
            }
        }
    }
    return s.substr(start, maxLength);
    }
};
